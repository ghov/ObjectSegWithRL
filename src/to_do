# 07/09/2018

Already Done:
1. Extract images based on bbox and store them into their own directory.
2. Make a json of the polygon sizes called vertex_count_segmentation_ids:
    a. The key is the size of the polygon(number of vertices) and the value is the segmentation id. All of these
     segmentation ids only have one polygon representing their segmentation.


Finished on 07/08/2018
1.  Get the size of every cropped image (height and width) and store them in some json.
    a. The json key will be the tuple of (height, width) and the value will be a list of segmentation ids
    b. Since json doesn't allow tuple as a key, I had to convert each tuple to a string. So str(100,112) for example
    c. Saved to data/bbox_crop_shape.json
2. Use the above mentioned json to filter out images that are bad. The best way to do this currently is to consider the
    size of the image.
    a. The filter used was (height * width >=10,000) and the json was saved to data/bbox_crop_shape_gte10k.json

Finished on 07/13/2018
1. It looks like my boundary check on the poly resizing was wrong. The segmentation have the wrong y-limit. Need to re-do
    that.
2. Need a way to put a segmentation mask on an image, just as in the coco functions.
3. Resize the polygons for each segmentation with respect to the crop.
    a. Need to make sure no vertices are out of bounds.
    b. The y variable should all be <= the height and the x variables should be <= the width

Finished on 07/17/2018
7. Make a function to move a subset of images in a directory and a subset of polygon data in a json file.
    Move the images to a new directory and make a new json with the subset information and save it in the same parent
     folder

Finished on 07/19/2018
1. Incorporate Dataloader into training.
2. Incorporate cuda into training
3. Incorporate model saving into training.

Finished on 07/20/2018
9. Add a custom activation function to keep the values between 0 and the edge of the images, in this case 224
10. Find a way to turn off dropout during training.

Finished on 07/21/2018
8. Add a function to take an image, produce a predicted polygon with a given model and display the segmentation on that
image. Need to convert image to tensor and convert output to a list, convert to proper format for coco, then display.


Need to do:

1. Need to have a way to cross-compare the vertex_count_segmentation_ids file with the bbox_crop_shape_ file
    a. i.e. Need to get rid of some file that are not meeting a requirement, such as size.
    b. Tried to do this, but it appears I fucked up. It looks like the bbox_crop_shape_gte10k file has 280669, while the
    vertex_count_segmentation_ids_gte10k has 468207. Not sure what happened here, but need to revisit it.


2. Look through vertex_count_segmentation_ids and find a key with a large number of segmentation ids.
    a. Consider every segmentation id that has not been filtered out previously.
    b. Resize these images to (224, 224) move them to a new folder.
    c. Also resize the polygon for each image and store it in a json. The key will be the segmentation value and the
    value will be the polygon as a list of values. Need to make sure that no vertex is out of bounds of the image.

3. Probably should filter out images that are too thin or too wide. This is quite hard to get a good balance for though.
    Could also filter out images that don't have enough pixels in either height or width, but again this is hard to
    balance properly.

6. Need to have more images with the same number of vertices. x3 = (x1 + x2)/2 and y3 = (y1 + y2)/2. Might want to
    consider points that are further away, though it may not matter.


11. Using sigmoid instead of ReLU results in no learning. Need to figure out why.
12. Need to figure out how to continue learning with a saved model state.
13. Need to normalize the images on training. Dataset class
14. Figure out why so many are just a small shape in the middle of image. Probably due to my 0-224 resizing.
    a. Actually, I'm thinking this might be a coco-problem. Because the shapes are the same.
    This happens majority of the time
    Another common thing is the polygon captures almost the whole image itself, or just a circle in the middle
    Its either the artifact, a big circle or a big square.

# Good polygon prediction segmentation from GregNet_MSELoss()_tensor(2504.4006)_RL_cS
1. 1769492
2. 343372
3. 679781
4. 2119418